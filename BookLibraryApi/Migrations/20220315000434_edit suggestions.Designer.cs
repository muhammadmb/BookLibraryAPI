// <auto-generated />
using System;
using BookLibraryApi.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookLibraryApi.Migrations
{
    [DbContext(typeof(BookContext))]
    [Migration("20220315000434_edit suggestions")]
    partial class editsuggestions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookLibraryApi.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("AddedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("IsDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfDeath")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("IsDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(186), new TimeSpan(0, 2, 0, 0, 0)),
                            Bio = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            DateOfBirth = new DateTime(1988, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeath = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000000"),
                            Name = "Khaled Ahmed",
                            PictureUrl = "https://images.unsplash.com/photo-1485893226355-9a1c32a0c81e?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(1777), new TimeSpan(0, 2, 0, 0, 0)),
                            Bio = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            DateOfBirth = new DateTime(1918, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeath = new DateTime(2018, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000000"),
                            Name = "Naguib Mahfouz",
                            PictureUrl = "https://i.pinimg.com/originals/f4/07/96/f40796f816539dcb76f3c7e4fb750370.jpg"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(2034), new TimeSpan(0, 2, 0, 0, 0)),
                            Bio = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            DateOfBirth = new DateTime(1995, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeath = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000001"),
                            Name = "Hung Men Son",
                            PictureUrl = "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixid=MXwxMjA3fDB8MHxzZWFyY2h8MzV8fHBlb3BsZXxlbnwwfHwwfA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(2045), new TimeSpan(0, 2, 0, 0, 0)),
                            Bio = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            DateOfBirth = new DateTime(1977, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeath = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000001"),
                            Name = "Adham Hamza",
                            PictureUrl = "https://images.unsplash.com/photo-1485528562718-2ae1c8419ae2?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=781&q=80"
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(2050), new TimeSpan(0, 2, 0, 0, 0)),
                            Bio = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            DateOfBirth = new DateTime(1988, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeath = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000002"),
                            Name = "Walter Diang",
                            PictureUrl = "https://images.unsplash.com/photo-1527980965255-d3b416303d12?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80"
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(2055), new TimeSpan(0, 2, 0, 0, 0)),
                            Bio = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            DateOfBirth = new DateTime(1898, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeath = new DateTime(1948, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000003"),
                            Name = "Ayman Banon",
                            PictureUrl = "https://images.unsplash.com/photo-1580309237429-661ea7cd1d53?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80"
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(2060), new TimeSpan(0, 2, 0, 0, 0)),
                            Bio = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            DateOfBirth = new DateTime(1998, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDeath = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000003"),
                            Name = "Masute Ozil",
                            PictureUrl = "https://images.unsplash.com/photo-1542178243-bc20204b769f?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80"
                        });
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookCover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateOfPublish")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("IsDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NumberOfBookPages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-1111-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(2627), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("10000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://www.designforwriters.com/wp-content/uploads/2017/10/design-for-writers-book-cover-tf-2-a-million-to-one.jpg",
                            BookTitle = "A Milion To One",
                            DateOfPublish = new DateTimeOffset(new DateTime(2014, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000000"),
                            NumberOfBookPages = 456,
                            Publisher = "Zindex"
                        },
                        new
                        {
                            Id = new Guid("00000000-2222-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5253), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("20000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://marketplace.canva.com/EAD7WWWtKSQ/1/0/251w/canva-purple-and-red-leaves-illustration-children%27s-book-cover-hNI7HYnNVQQ.jpg",
                            BookTitle = "Amara the brave",
                            DateOfPublish = new DateTimeOffset(new DateTime(2018, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000000"),
                            NumberOfBookPages = 285,
                            Publisher = "AI"
                        },
                        new
                        {
                            Id = new Guid("00000000-3333-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5290), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("30000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://d1csarkz8obe9u.cloudfront.net/posterpreviews/action-thriller-book-cover-design-template-3675ae3e3ac7ee095fc793ab61b812cc_screen.jpg?ts=1588152105",
                            BookTitle = "The king of drugs",
                            DateOfPublish = new DateTimeOffset(new DateTime(1987, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000001"),
                            NumberOfBookPages = 145,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-4444-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5315), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("40000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://static01.nyt.com/images/2014/02/05/books/05before-and-after-slide-T6H2/05before-and-after-slide-T6H2-superJumbo.jpg?quality=75&auto=webp&disable=upscale",
                            BookTitle = "The Martian",
                            DateOfPublish = new DateTimeOffset(new DateTime(2010, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000002"),
                            NumberOfBookPages = 575,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-5555-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5325), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("40000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://images.squarespace-cdn.com/content/v1/5ae2fce87e3c3ae275ea2c9f/1526464175408-W92Q4MSAM40I8YF4HM64/ke17ZwdGBToddI8pDm48kG42nK5MxReh9N1Tgs_dc9t7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z5QPOohDIaIeljMHgDF5CVlOqpeNLcJ80NK65_fV7S1UXysNIcM8ERoy824r28kfN5DdNsbvYnFI46u1WARIoKesh_vZu_IHrh0xbom9DKbTA/tess-cover.jpg?format=1500w",
                            BookTitle = "Tess of the road",
                            DateOfPublish = new DateTimeOffset(new DateTime(1998, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000002"),
                            NumberOfBookPages = 185,
                            Publisher = "Alef"
                        },
                        new
                        {
                            Id = new Guid("00000000-6666-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5333), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("40000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://cms-assets.tutsplus.com/uploads/users/1631/posts/32582/image/Soulful%20Poetry%20Book%20Cover%20Template%20copy.jpg",
                            BookTitle = "Songs with Souls",
                            DateOfPublish = new DateTimeOffset(new DateTime(1998, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000002"),
                            NumberOfBookPages = 450,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-7777-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5341), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("30000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://assets-2.placeit.net/smart_templates/e639b9513adc63d37ee4f577433b787b/assets/wn5u193mcjesm2ycxacaltq8jdu68kmu.jpg",
                            BookTitle = "Story Book",
                            DateOfPublish = new DateTimeOffset(new DateTime(1997, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000003"),
                            NumberOfBookPages = 221,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-8888-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5348), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("10000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://i.pinimg.com/originals/1e/c5/df/1ec5df963765d4bcf151467c99d1dae7.jpg",
                            BookTitle = "Finding Moana",
                            DateOfPublish = new DateTimeOffset(new DateTime(1997, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000002"),
                            NumberOfBookPages = 185,
                            Publisher = "Book One"
                        },
                        new
                        {
                            Id = new Guid("00000000-9999-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5355), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("20000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://i.pinimg.com/originals/a4/aa/c1/a4aac1f3d86869bcfd2833e8be768014.jpg",
                            BookTitle = "City on the edge",
                            DateOfPublish = new DateTimeOffset(new DateTime(1996, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000001"),
                            NumberOfBookPages = 185,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1010-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5362), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("10000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://d1csarkz8obe9u.cloudfront.net/posterpreviews/haunted-house-horror-book-cover-design-template-fd3a8016a4128af962549c3c40190270_screen.jpg?ts=1588747771",
                            BookTitle = "House Of Secrets",
                            DateOfPublish = new DateTimeOffset(new DateTime(2006, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000005"),
                            NumberOfBookPages = 158,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1100-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5371), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("10000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://i.pinimg.com/originals/d1/47/e9/d147e94169caabe9ca52cf7e7f20bb4c.jpg",
                            BookTitle = "The Carrow Haunt",
                            DateOfPublish = new DateTimeOffset(new DateTime(1996, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000005"),
                            NumberOfBookPages = 444,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1212-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5378), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("30000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://i.pinimg.com/originals/a4/aa/c1/a4aac1f3d86869bcfd2833e8be768014.jpg",
                            BookTitle = "Stephen King",
                            DateOfPublish = new DateTimeOffset(new DateTime(2007, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000005"),
                            NumberOfBookPages = 800,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1313-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5386), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("20000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://corviddesign.com/wp-content/uploads/2015/11/isntfunny_web.png",
                            BookTitle = "Isn't That Funny",
                            DateOfPublish = new DateTimeOffset(new DateTime(2013, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000005"),
                            NumberOfBookPages = 545,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1414-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5392), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("20000000-0000-0000-abcd-000000000000"),
                            BookCover = "hhttps://artfulcover.com/wp-content/uploads/2018/06/Artful-Cover_premade_126524214_Creepy-Kid-Ghost_800x1200.jpg",
                            BookTitle = "Creepy Kid Ghost",
                            DateOfPublish = new DateTimeOffset(new DateTime(2015, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000005"),
                            NumberOfBookPages = 652,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1515-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5397), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("20000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://i.pinimg.com/originals/97/26/e8/9726e81b7bba2b8fe0aca6f804b1f44b.jpg",
                            BookTitle = "The Black Thunder",
                            DateOfPublish = new DateTimeOffset(new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000002"),
                            NumberOfBookPages = 325,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1616-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5404), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("20000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://damonza.com/wp-content/uploads/portfolio/fiction/torrent-15.jpg",
                            BookTitle = "Torrent",
                            DateOfPublish = new DateTimeOffset(new DateTime(2010, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000002"),
                            NumberOfBookPages = 475,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1717-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5411), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("20000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://damonza.com/wp-content/uploads/portfolio/fiction/torrent-15.jpg",
                            BookTitle = "Torrent",
                            DateOfPublish = new DateTimeOffset(new DateTime(2010, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000002"),
                            NumberOfBookPages = 475,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1818-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5419), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("10000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://i.pinimg.com/originals/aa/11/6a/aa116a773d6049b0d9d778aae0650062.jpg",
                            BookTitle = "The Blue Princes",
                            DateOfPublish = new DateTimeOffset(new DateTime(2019, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000001"),
                            NumberOfBookPages = 405,
                            Publisher = "non"
                        },
                        new
                        {
                            Id = new Guid("00000000-1919-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(5425), new TimeSpan(0, 2, 0, 0, 0)),
                            AuthorId = new Guid("10000000-0000-0000-abcd-000000000000"),
                            BookCover = "https://www.mythosink.com/wp-content/uploads/2020/01/Screen-Shot-2020-01-20-at-6.00.55-PM.png",
                            BookTitle = "Tarnished light",
                            DateOfPublish = new DateTimeOffset(new DateTime(2020, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            GenreId = new Guid("00000000-0000-0000-abcd-000000000001"),
                            NumberOfBookPages = 507,
                            Publisher = "non"
                        });
                });

            modelBuilder.Entity("BookLibraryApi.Entities.BookRating", b =>
                {
                    b.Property<Guid>("BookRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FiveStarsRate")
                        .HasColumnType("int");

                    b.Property<int>("FourStarsRate")
                        .HasColumnType("int");

                    b.Property<int>("OneStarRate")
                        .HasColumnType("int");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.Property<int>("ThreeStarsRate")
                        .HasColumnType("int");

                    b.Property<int>("TotalRate")
                        .HasColumnType("int");

                    b.Property<int>("TwoStarsRate")
                        .HasColumnType("int");

                    b.HasKey("BookRateId");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("BookRatings");

                    b.HasData(
                        new
                        {
                            BookRateId = new Guid("11111111-0000-0000-abcd-000000000000"),
                            BookId = new Guid("00000000-1111-0000-abcd-000000000000"),
                            FiveStarsRate = 1,
                            FourStarsRate = 1,
                            OneStarRate = 0,
                            ReviewsCount = 2,
                            ThreeStarsRate = 0,
                            TotalRate = 9,
                            TwoStarsRate = 0
                        },
                        new
                        {
                            BookRateId = new Guid("22222222-0000-0000-abcd-000000000000"),
                            BookId = new Guid("00000000-6666-0000-abcd-000000000000"),
                            FiveStarsRate = 0,
                            FourStarsRate = 0,
                            OneStarRate = 0,
                            ReviewsCount = 1,
                            ThreeStarsRate = 0,
                            TotalRate = 2,
                            TwoStarsRate = 1
                        },
                        new
                        {
                            BookRateId = new Guid("33333333-0000-0000-abcd-000000000000"),
                            BookId = new Guid("00000000-7777-0000-abcd-000000000000"),
                            FiveStarsRate = 0,
                            FourStarsRate = 0,
                            OneStarRate = 0,
                            ReviewsCount = 2,
                            ThreeStarsRate = 0,
                            TotalRate = 4,
                            TwoStarsRate = 2
                        },
                        new
                        {
                            BookRateId = new Guid("44444444-0000-0000-abcd-000000000000"),
                            BookId = new Guid("00000000-8888-0000-abcd-000000000000"),
                            FiveStarsRate = 1,
                            FourStarsRate = 1,
                            OneStarRate = 0,
                            ReviewsCount = 3,
                            ThreeStarsRate = 0,
                            TotalRate = 11,
                            TwoStarsRate = 1
                        },
                        new
                        {
                            BookRateId = new Guid("55555555-0000-0000-abcd-000000000000"),
                            BookId = new Guid("00000000-9999-0000-abcd-000000000000"),
                            FiveStarsRate = 1,
                            FourStarsRate = 1,
                            OneStarRate = 0,
                            ReviewsCount = 3,
                            ThreeStarsRate = 0,
                            TotalRate = 11,
                            TwoStarsRate = 1
                        },
                        new
                        {
                            BookRateId = new Guid("66666666-0000-0000-abcd-000000000000"),
                            BookId = new Guid("00000000-2222-0000-abcd-000000000000"),
                            FiveStarsRate = 1,
                            FourStarsRate = 1,
                            OneStarRate = 0,
                            ReviewsCount = 2,
                            ThreeStarsRate = 0,
                            TotalRate = 9,
                            TwoStarsRate = 0
                        },
                        new
                        {
                            BookRateId = new Guid("77777777-0000-0000-abcd-000000000000"),
                            BookId = new Guid("00000000-4444-0000-abcd-000000000000"),
                            FiveStarsRate = 0,
                            FourStarsRate = 0,
                            OneStarRate = 0,
                            ReviewsCount = 2,
                            ThreeStarsRate = 2,
                            TotalRate = 6,
                            TwoStarsRate = 0
                        },
                        new
                        {
                            BookRateId = new Guid("88888888-0000-0000-abcd-000000000000"),
                            BookId = new Guid("00000000-5555-0000-abcd-000000000000"),
                            FiveStarsRate = 0,
                            FourStarsRate = 1,
                            OneStarRate = 0,
                            ReviewsCount = 2,
                            ThreeStarsRate = 0,
                            TotalRate = 6,
                            TwoStarsRate = 1
                        });
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IsDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IsDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PicUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 172, DateTimeKind.Unspecified).AddTicks(6041), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Suspendisse id accumsan lacus. Phasellus condimentum volutpat libero id finibus.",
                            GenreName = "Classics",
                            PicUrl = "https://cdn.shopify.com/s/files/1/0064/5342/8271/products/PCCP5-Penguin_Classics_Cameo_angle_1200_300x.jpg?v=1556052881"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-abcd-000000000001"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 174, DateTimeKind.Unspecified).AddTicks(2040), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Suspendisse id accumsan lacus. Phasellus condimentum volutpat libero id finibus.",
                            GenreName = "Fantasy",
                            PicUrl = "https://www.rd.com/wp-content/uploads/2019/12/book-e1576790089347.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-abcd-000000000002"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 174, DateTimeKind.Unspecified).AddTicks(2075), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Suspendisse id accumsan lacus. Phasellus condimentum volutpat libero id finibus.",
                            GenreName = "Action and Adventure",
                            PicUrl = "https://alisonmortonauthor.com/wp-content/uploads/2014/01/books.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-abcd-000000000003"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 174, DateTimeKind.Unspecified).AddTicks(2081), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Suspendisse id accumsan lacus. Phasellus condimentum volutpat libero id finibus.",
                            GenreName = "Comic Book",
                            PicUrl = "https://www.sun-sentinel.com/resizer/1fuMDdJE7v3kltVnXX07CWZ58Ws=/415x614/top/www.trbimg.com/img-5caf8a09/turbine/fl-1555008005-hc4qu2941s-snap-image"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-abcd-000000000004"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 174, DateTimeKind.Unspecified).AddTicks(2085), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Suspendisse id accumsan lacus. Phasellus condimentum volutpat libero id finibus.",
                            GenreName = "Romance",
                            PicUrl = "https://pbs.twimg.com/media/EQuNRJoU0AAvyKD.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-abcd-000000000005"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 174, DateTimeKind.Unspecified).AddTicks(2087), new TimeSpan(0, 2, 0, 0, 0)),
                            Description = "Suspendisse id accumsan lacus. Phasellus condimentum volutpat libero id finibus.",
                            GenreName = "Horror",
                            PicUrl = "https://images.thestar.com/xN_oIrR10VL8zpaa1-hDq0ELBE8=/1086x1652/smart/filters:cb(1594158289211)/https://www.thestar.com/content/dam/thestar/entertainment/books/2020/07/09/horror-books-to-make-you-lose-your-cool-on-a-hot-summers-night/if_it_bleeds.jpg"
                        });
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookRate")
                        .HasColumnType("int");

                    b.Property<int>("DownVote")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("IsDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReviewDescription")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpVote")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-1010-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(6089), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-1111-0000-abcd-000000000000"),
                            BookRate = 5,
                            DownVote = 0,
                            Email = "XMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Xman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-2010-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7571), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-1111-0000-abcd-000000000000"),
                            BookRate = 4,
                            DownVote = 0,
                            Email = "AMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Aman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-3010-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7587), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-2222-0000-abcd-000000000000"),
                            BookRate = 4,
                            DownVote = 0,
                            Email = "BMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Bman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-4010-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7591), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-2222-0000-abcd-000000000000"),
                            BookRate = 5,
                            DownVote = 0,
                            Email = "CMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Cman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-5010-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7632), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-3333-0000-abcd-000000000000"),
                            BookRate = 1,
                            DownVote = 0,
                            Email = "DMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Dman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-6010-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7640), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-4444-0000-abcd-000000000000"),
                            BookRate = 3,
                            DownVote = 0,
                            Email = "EMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Eman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-7010-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7644), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-4444-0000-abcd-000000000000"),
                            BookRate = 3,
                            DownVote = 0,
                            Email = "FMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Fman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-8010-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7649), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-5555-0000-abcd-000000000000"),
                            BookRate = 4,
                            DownVote = 0,
                            Email = "GMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Gman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-9010-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7653), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-5555-0000-abcd-000000000000"),
                            BookRate = 2,
                            DownVote = 0,
                            Email = "HMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Hman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-1110-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7656), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-6666-0000-abcd-000000000000"),
                            BookRate = 2,
                            DownVote = 0,
                            Email = "ZMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Zman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-1210-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7660), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-7777-0000-abcd-000000000000"),
                            BookRate = 2,
                            DownVote = 0,
                            Email = "VMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Vman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-1310-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7665), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-7777-0000-abcd-000000000000"),
                            BookRate = 2,
                            DownVote = 0,
                            Email = "NMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Nman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-1410-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7669), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-8888-0000-abcd-000000000000"),
                            BookRate = 5,
                            DownVote = 0,
                            Email = "MMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Mman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-1510-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7673), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-8888-0000-abcd-000000000000"),
                            BookRate = 1,
                            DownVote = 0,
                            Email = "LMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Lman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-1610-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7676), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-8888-0000-abcd-000000000000"),
                            BookRate = 4,
                            DownVote = 0,
                            Email = "KMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Kman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-1710-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7680), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-9999-0000-abcd-000000000000"),
                            BookRate = 2,
                            DownVote = 0,
                            Email = "PMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Pman",
                            UpVote = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-1810-abcd-000000000000"),
                            AddedDate = new DateTimeOffset(new DateTime(2022, 3, 15, 2, 4, 34, 175, DateTimeKind.Unspecified).AddTicks(7683), new TimeSpan(0, 2, 0, 0, 0)),
                            BookId = new Guid("00000000-9999-0000-abcd-000000000000"),
                            BookRate = 1,
                            DownVote = 0,
                            Email = "IMan@abc.com",
                            ReviewDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed faucibus quis nibh non sagittis",
                            ReviewerName = "Iman",
                            UpVote = 0
                        });
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Suggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("AddedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookCover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfPublish")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("IsDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("NumberOfBookPages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("BookLibraryApi.Models.AuthenticationModels.RefreshTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevorked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Author", b =>
                {
                    b.HasOne("BookLibraryApi.Entities.Genre", "Genre")
                        .WithMany("Authors")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Book", b =>
                {
                    b.HasOne("BookLibraryApi.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BookLibraryApi.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookLibraryApi.Entities.BookRating", b =>
                {
                    b.HasOne("BookLibraryApi.Entities.Book", "Book")
                        .WithOne("BookRating")
                        .HasForeignKey("BookLibraryApi.Entities.BookRating", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Review", b =>
                {
                    b.HasOne("BookLibraryApi.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookLibraryApi.Models.AuthenticationModels.RefreshTokens", b =>
                {
                    b.HasOne("BookLibraryApi.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookLibraryApi.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookLibraryApi.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibraryApi.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookLibraryApi.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Book", b =>
                {
                    b.Navigation("BookRating");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookLibraryApi.Entities.Genre", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
